(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{60:function(t,a,s){"use strict";s.r(a);var n=s(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"array重点api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array重点api","aria-hidden":"true"}},[t._v("#")]),t._v(" Array重点API")]),t._v(" "),s("p",[t._v("💗 表示返回新数组，不改变老数组")]),t._v(" "),s("p",[t._v("✅ 表示返回布尔值")]),t._v(" "),s("p",[t._v("🔹 表示改变原数组")]),t._v(" "),s("h2",{attrs:{id:"array对象方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array对象方法","aria-hidden":"true"}},[t._v("#")]),t._v(" Array对象方法")]),t._v(" "),s("h3",{attrs:{id:"array-isarray"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-isarray","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.isArray ✅")]),t._v(" "),s("p",[t._v("确定传递的值是否是一个 Array")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：需要检测的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：如果值是 Array，则为true; 否则为false")]),t._v("\nArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Array.prototype 也是一个数组")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//兼容")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("isArray")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arg")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[object Array]'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("Array.isArray能检测iframes，所以优于 instanceof")]),t._v(" "),s("h3",{attrs:{id:"array-from"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-from","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.from 💗")]),t._v(" "),s("p",[t._v("从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组实例")]),t._v(" "),s("ul",[s("li",[t._v("伪数组对象（拥有一个 length 属性和若干索引属性的任意对象）")]),t._v(" "),s("li",[t._v("可迭代对象（可以获取对象中的元素,如 Map和 Set 等）")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：想要转换成数组的伪数组对象或可迭代对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：如果指定了该参数，新数组中的每个元素会执行该回调函数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数3：执行回调函数 mapFn 时 this 对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：一个新的数组实例")]),t._v("\nArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayLike"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" mapFn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thisArg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//就相当于 Array.from(obj).map(mapFn, thisArg)")]),t._v("\n")])])]),s("h3",{attrs:{id:"array-of"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-of","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.of 💗")]),t._v(" "),s("p",[t._v("创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型")]),t._v(" "),s("p",[t._v("Array.of() 和 Array 构造函数之间的区别在于处理整数参数：Array(7)（注意：这是指一个有7个空位(empty)的数组，而不是由7个undefined组成的数组）")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：任意个参数，将按顺序成为返回数组中的元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：新的 Array 实例")]),t._v("\nArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("of")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" element1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" elementN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nArray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("of")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [1, 2, 3]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//兼容")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("of"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("of")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"array-from和array-of的异同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-from和array-of的异同","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.from和Array.of的异同")]),t._v(" "),s("ul",[s("li",[t._v("相同：都是将参数转换为新数组实例")]),t._v(" "),s("li",[t._v("不同：Array.from第一个参数是伪数组或可迭代对象，第二个可选参数是回调函数，而Array.of不考虑参数的数量或类型；")])]),t._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("Array原型上的方法，都可以在数组实例后以“.”方式直接调用")])]),t._v(" "),s("h2",{attrs:{id:"array原型——常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array原型——常用方法","aria-hidden":"true"}},[t._v("#")]),t._v(" Array原型——常用方法")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-concat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-concat","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.concat 💗")]),t._v(" "),s("p",[t._v("用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：将数组和/或值连接成新数组。如果省略了valueN参数参数，则concat会返回一个它所调用的已存在的数组的浅拷贝。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：新的 Array 实例")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" new_array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" old_array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" valueN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"array-prototype-join"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-join","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.join")]),t._v(" "),s("p",[t._v("将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。如果数组只有一个项目，那么将返回该项目而不使用分隔符。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：可选。指定一个字符串来分隔数组的每个元素。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：一个所有数组元素连接的字符串。如果 arr.length 为0，则返回空字符串")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("separator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v('参数：如果需要，将分隔符转换为字符串。如果缺省该值，数组元素用逗号（,）分隔。如果separator是空字符串("")，则所有元素之间都没有任何字符。')]),t._v(" "),s("p",[t._v("如果一个元素为 undefined 或 null，它会被转换为空字符串。")]),t._v(" "),s("ul",[s("li",[t._v("对象引用（而不是实际对象）：concat将对象引用复制到新数组中。 原始数组和新数组都引用相同的对象。 也就是说，如果引用的对象被修改，则更改对于新数组和原始数组都是可见的。 这包括也是数组的数组参数的元素。")]),t._v(" "),s("li",[t._v("数据类型如字符串，数字和布尔（不是String，Number 和 Boolean 对象）：concat将字符串和数字的值复制到新数组中。")])]),t._v(" "),s("h3",{attrs:{id:"array-prototype-flat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-flat","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.flat 💗")]),t._v(" "),s("p",[t._v("按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：指定要提取嵌套数组的结构深度，默认值为 1；")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接上！参数使用 Infinity，可展开任意深度的嵌套数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：一个包含将数组与子数组中所有元素的新数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newArray "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flat")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("depth"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("实例：扁平化嵌套数组")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-sort"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-sort","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.sort 🔹")]),t._v(" "),s("p",[t._v("用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的")]),t._v(" "),s("p",[t._v("由于它取决于具体实现，因此无法保证排序的时间和空间复杂性。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：用来指定按某种顺序进行排列的函数。如果省略，元素按照转换为的字符串的各个字符的Unicode位点进行排序。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//firstEl：第一个用于比较的元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//secondEl：第二个用于比较的元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：排序后的数组。请注意，数组已原地排序，并且不进行复制。")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("compareFunction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"非遍历——查找（返回索引-1）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非遍历——查找（返回索引-1）","aria-hidden":"true"}},[t._v("#")]),t._v(" 非遍历——查找（返回索引/-1）")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-indexof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-indexof","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.indexOf")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：要查找的元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：开始查找的位置")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：首个被找到的元素在数组中的索引位置; 若没有找到则返回 -1")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("searchElement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fromIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("如果该索引值大于或等于数组长度，意味着不会在数组里查找，返回-1。如果参数中提供的索引值是一个负值，则将其作为数组末尾的一个抵消，即-1表示从最后一个元素开始查找，-2表示从倒数第二个元素开始查找 ，以此类推。 注意：如果参数中提供的索引值是一个负值，并不改变其查找顺序，查找顺序仍然是从前向后查询数组。如果抵消后的索引值仍小于0，则整个数组都将会被查询。其默认值为0")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-lastindexof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-lastindexof","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.lastIndexOf")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：被查找的元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：从此位置开始逆向查找")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：数组中该元素最后一次出现的索引，如未找到返回-1")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lastIndexOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("searchElement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fromIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("默认为数组的长度减 1(arr.length - 1)，即整个数组都被查找。如果该值大于或等于数组的长度，则整个数组会被查找。如果为负值，将其视为从数组末尾向前的偏移。即使该值为负，数组仍然会被从后向前查找。如果该值为负时，其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-includes-（返回布尔值）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-includes-（返回布尔值）","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.includes ✅（返回布尔值）")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：需要查找的元素值，区分大小写")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：从fromIndex 索引处开始查找 valueToFind。如果为负值，则按升序从 array.length + fromIndex 的索引开始搜 （即使从末尾开始往前跳 fromIndex 的绝对值个索引，然后往后搜寻）。默认为 0。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("valueToFind"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fromIndex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("如果 fromIndex 大于等于数组的长度，则会返回 false，且该数组不会被搜索。")]),t._v(" "),s("p",[t._v("如果 fromIndex 为负值，计算出的索引将作为开始搜索searchElement的位置。如果计算出的索引小于 0，则整个数组都会被搜索。")]),t._v(" "),s("p",[t._v("includes() 方法有意设计为通用方法。它不要求this值是数组对象，所以它可以被用于其他类型的对象 (比如类数组对象)。下面的例子展示了 在函数的 arguments 对象上调用的 includes() 方法。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"遍历类——查找（返回元素或索引-1）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历类——查找（返回元素或索引-1）","aria-hidden":"true"}},[t._v("#")]),t._v(" 遍历类——查找（返回元素或索引/-1）")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-find"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-find","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.find")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：在数组每一项上执行的函数，接收 3 个参数：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//element：当前遍历到的元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//index：当前遍历到的索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//array：数组本身")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：执行回调时用作this 的对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：数组中第一个满足所提供测试函数的元素的值，否则返回 undefined")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("find")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thisArg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("find方法对数组中的每一项元素执行一次 callback 函数，直至有一个 callback 返回 true。当找到了这样一个元素后，该方法会立即返回这个元素的值，否则返回 undefined。注意 callback 函数会为数组中的每个索引调用即从 0 到 length - 1，而不仅仅是那些被赋值的索引，这意味着对于稀疏数组来说，该方法的效率要低于那些只遍历有值的索引的方法。")]),t._v(" "),s("p",[t._v("如果提供了 thisArg参数，那么它将作为每次 callback函数执行时的this ，如果未提供，则使用 undefined。")]),t._v(" "),s("p",[t._v("另请参见  findIndex() 方法，它返回数组中找到的元素的索引，而不是其值。")]),t._v(" "),s("p",[t._v("如果你需要找到一个元素的位置或者一个元素是否存在于数组中，使用Array.prototype.indexOf() 或 Array.prototype.includes()。")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-findindex"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-findindex","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.findIndex")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：针对数组中的每个元素, 都会执行该回调函数, 执行时会自动传入下面三个参数:")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//element：当前遍历到的元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//index：当前遍历到的索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//array：数组本身")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：可选。执行callback时作为this对象的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值： 数组中通过提供测试函数的第一个元素的索引。否则，返回-1")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findIndex")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thisArg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h4",{attrs:{id:"find、findindex的异同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#find、findindex的异同","aria-hidden":"true"}},[t._v("#")]),t._v(" find、findIndex的异同")]),t._v(" "),s("ul",[s("li",[t._v("相同：二者参数一样，都是查找数组元素")]),t._v(" "),s("li",[t._v("不同：返回值不同，find返回查找到的元素/undefined，findIndex返回查找到的元素索引/-1")])]),t._v(" "),s("h4",{attrs:{id:"findindex、indexof的异同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#findindex、indexof的异同","aria-hidden":"true"}},[t._v("#")]),t._v(" findIndex、indexOf的异同")]),t._v(" "),s("ul",[s("li",[t._v("相同：二者返回值一样，都是返回查找到的元素索引/-1")]),t._v(" "),s("li",[t._v("不同：参数不同，findIndex参数是回调函数和this，indexOf参数是元素和开始索引")])]),t._v(" "),s("h2",{attrs:{id:"遍历类——遍历计算（返回新数组）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历类——遍历计算（返回新数组）","aria-hidden":"true"}},[t._v("#")]),t._v(" 遍历类——遍历计算（返回新数组）")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-foreach-（返回undefined）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-foreach-（返回undefined）","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.forEach （返回undefined）")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：为数组中每个元素执行的函数，该函数接收三个参数：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//currentValue：当前正在数组中处理的元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//index：数组中正在处理的当前元素的索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//array：被调用的 map 数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：当执行回调函数 callback 时，用作 this 的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：undefined")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentValue "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thisArg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("forEach() 为每个数组元素执行一次 callback 函数；与 map() 或者 reduce() 不同的是，它总是返回 undefined 值，并且不可链式调用。其典型用例是在一个调用链的最后执行副作用（side effects，函数式编程上，指函数进行 返回结果值 以外的操作）。")]),t._v(" "),s("p",[s("strong",[t._v("注意")]),t._v("： 除了抛出异常以外，没有办法中止或跳出 forEach() 循环。如果你需要中止或跳出循环，forEach() 方法不是应当使用的工具。")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-map"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-map","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.map 💗")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：生成新数组元素的函数，使用三个参数：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//currentValue：正在处理的当前元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//index：当前元素的索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//array：map 方法调用的数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：执行 callback 函数时值被用作this")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：回调函数的结果组成了新数组的每一个元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" new_array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("currentValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Return element for new_array ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thisArg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("map 方法会给原数组中的每个元素都按顺序调用一次  callback 函数。callback 每次执行后的返回值（包括 undefined）组合起来形成一个新数组。 callback 函数只会在有值的索引上被调用；那些从来没被赋过值或者使用 delete 删除的索引则不会被调用。")]),t._v(" "),s("p",[t._v("因为map生成一个新数组，当你不打算使用返回的新数组却使用map是违背设计初衷的，请用forEach或者for-of替代。")]),t._v(" "),s("p",[t._v("如果被map调用的数组是离散的，新数组将也是离散的保持相同的索引为空。")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-flatmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-flatmap","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.flatMap 💗")]),t._v(" "),s("p",[t._v("首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map 连着深度值为1的 flat 几乎相同，但 flatMap 通常在合并成一种方法的效率稍微高一些。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：可以生成一个新数组中的元素的函数，可以传入三个参数：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//currentValue：当前正在数组中处理的元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//index：数组中正在处理的当前元素的索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//array：被调用的 map 数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：执行 callback 函数时 使用的this 值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：一个新的数组，其中每个元素都是回调函数的结果，并且结构深度 depth 值为1。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" new_array "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("flatMap")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("currentValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// return element for new_array")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thisArg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"遍历类——过滤（返回新数组）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历类——过滤（返回新数组）","aria-hidden":"true"}},[t._v("#")]),t._v(" 遍历类——过滤（返回新数组）")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-filter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-filter","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.filter 💗")]),t._v(" "),s("p",[t._v("filter 不会改变原数组，它返回"),s("strong",[t._v("过滤")]),t._v("后的新数组。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：用来测试数组的每个元素的函数。返回 true 表示该元素通过测试，保留该元素，false 则不保留。它接受以下三个参数：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//element：数组中当前正在处理的元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//index：正在处理的元素在数组中的索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//array：调用了 filter 的数组本身")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：执行 callback 时，用于 this 的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" newArray "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thisArg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v('如果为 filter 提供一个 thisArg 参数，则它会被作为 callback 被调用时的 this 值。否则，callback 的 this 值在非严格模式下将是全局对象，严格模式下为 undefined。callback 函数最终观察到的 this 值是根据通常函数所看到的 "this"的规则确定的。')]),t._v(" "),s("h2",{attrs:{id:"遍历类——验证（返回布尔值）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历类——验证（返回布尔值）","aria-hidden":"true"}},[t._v("#")]),t._v(" 遍历类——验证（返回布尔值）")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-every"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-every","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.every ✅")]),t._v(" "),s("p",[t._v("测试一个数组内的"),s("strong",[t._v("所有")]),t._v("元素是否都能通过某个指定函数的测试。它返回一个布尔值。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：用来测试每个元素的函数。包括三个参数：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//element：用于测试的当前值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//index：用于测试的当前值的索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//array：调用 every 的当前数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：执行 callback 时使用的 this 值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：如果回调函数的每一次返回都为 truthy 值，返回 true ，否则返回 false。")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("every")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thisArg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("every 方法为数组中的每个元素执行一次 callback 函数，直到它找到一个会使 callback 返回 falsy 的元素。如果发现了一个这样的元素，every 方法将会立即返回 false。否则，callback 为每一个元素返回 true，every 就会返回 true。callback 只会为那些已经被赋值的索引调用。不会为那些被删除或从未被赋值的索引调用。")]),t._v(" "),s("p",[t._v("如果为 every 提供一个 thisArg 参数，则该参数为调用 callback 时的 this 值。如果省略该参数，则 callback 被调用时的 this 值，在非严格模式下为全局对象，在严格模式下传入 undefined。")]),t._v(" "),s("p",[t._v("every 遍历的元素范围在第一次调用 callback 之前就已确定了。在调用 every 之后添加到数组中的元素不会被 callback 访问到。如果数组中存在的元素被更改，则他们传入 callback 的值是 every 访问到他们那一刻的值。那些被删除的元素或从来未被赋值的元素将不会被访问到。")]),t._v(" "),s("p",[t._v('every 和数学中的"所有"类似，当所有的元素都符合条件才会返回true。正因如此，若传入一个空数组，无论如何都会返回 true。（这种情况属于无条件正确：正因为一个空集合没有元素，所以它其中的所有元素都符合给定的条件。)')]),t._v(" "),s("h3",{attrs:{id:"array-prototype-some"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-some","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.some ✅")]),t._v(" "),s("p",[t._v("测试数组中是不是至少有1个元素通过了被提供的函数测试。它返回的是一个Boolean类型的值。")]),t._v(" "),s("p",[t._v("注意：如果用一个空数组进行测试，在任何情况下它返回的都是false。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：用来测试每个元素的函数，接受三个参数：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//element：用于测试的当前值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//index：用于测试的当前值的索引")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//array：调用 every 的当前数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：执行 callback 时使用的 this 值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：数组中有至少一个元素通过回调函数的测试就会返回true；所有元素都没有通过回调函数的测试返回值才会为false。")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("some")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" thisArg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("some() 为数组中的每一个元素执行一次 callback 函数，直到找到一个使得 callback 返回一个“真值”（即可转换为布尔值 true 的值）。如果找到了这样一个值，some() 将会立即返回 true。否则，some() 返回 false。callback 只会在那些”有值“的索引上被调用，不会在那些被删除或从来未被赋值的索引上调用。")]),t._v(" "),s("h2",{attrs:{id:"遍历类——累计（返回累计值）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#遍历类——累计（返回累计值）","aria-hidden":"true"}},[t._v("#")]),t._v(" 遍历类——累计（返回累计值）")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-reduce"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-reduce","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.reduce")]),t._v(" "),s("p",[t._v("对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：执行数组中每个值 (如果没有提供 initialValue则第一个值除外)的函数，包含四个参数：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Accumulator：累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Current Value：当前值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Current Index：当前索引。 如果提供了initialValue，则起始索引号为0，否则从索引1起始。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Source Array：原数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接上！在没有初始值的空数组上调用 reduce 将报错。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：函数累计处理的结果")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("accumulator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" initialValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("回调函数第一次执行时，accumulator 和currentValue的取值有两种情况：如果调用reduce()时提供了initialValue，accumulator取值为initialValue，currentValue取数组中的第一个值；如果没有提供 initialValue，那么accumulator取数组中的第一个值，currentValue取数组中的第二个值。")]),t._v(" "),s("p",[s("strong",[t._v("注意")]),t._v("：如果没有提供initialValue，reduce 会从索引1的地方开始执行 callback 方法，跳过第一个索引。如果提供initialValue，从索引0开始。")]),t._v(" "),s("p",[t._v("如果数组为空且没有提供initialValue，会抛出TypeError 。如果数组仅有一个元素（无论位置如何）并且没有提供initialValue， 或者有提供initialValue但是数组为空，那么此唯一值将被返回并且callback不会被执行。")]),t._v(" "),s("p",[t._v("提供初始值通常更安全。")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-reduceright"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-reduceright","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.reduceRight")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：一个回调函数，用来操作数组中的每个元素，包含四个参数：")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Accumulator：累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Current Value：当前值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Current Index：当前索引。 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Source Array：原数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：值用作回调的第一次调用的累加器。如果未提供初始值，则将使用并跳过数组中的最后一个元素。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接上！在没有初始值的空数组上调用reduce或reduceRight就会创建一个TypeError。 ")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：函数累计处理的结果")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduceRight")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("callback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("accumulator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" initialValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("首次调用回调函数时，accumulator 和 currentValue 可以是两个值之一。如果调用 reduceRight 时提供了 initialValue 参数，则 accumulator等于 initialValue，currentValue 等于数组中的最后一个值。如果没有提供 initialValue 参数，则 accumulator 等于数组最后一个值， currentValue 等于数组中倒数第二个值。")]),t._v(" "),s("h2",{attrs:{id:"获取数组键-值组成的数组（无参数）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取数组键-值组成的数组（无参数）","aria-hidden":"true"}},[t._v("#")]),t._v(" 获取数组键/值组成的数组（无参数）")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-keys"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-keys","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.keys 💗")]),t._v(" "),s("p",[t._v("返回一个包含数组中每个索引键的Array Iterator对象")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//无参数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：一个新的 Array 迭代器对象")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("keys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"array-prototype-values"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-values","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.values 💗")]),t._v(" "),s("p",[t._v("返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//无参数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：一个新的 Array 迭代对象")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"array-prototype-entries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-entries","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.entries 💗")]),t._v(" "),s("p",[t._v("返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//无参数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：一个新的 Array 迭代器对象。Array Iterator是对象，它的原型（__proto__:Array Iterator）上有一个next方法，可用用于遍历迭代器取得原数组的[key,value]。")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("entries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" array1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" iterator1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("entries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterator1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// expected output: Array [0, "a"]')]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterator1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// expected output: Array [1, "b"]')]),t._v("\n")])])]),s("h2",{attrs:{id:"改变原数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#改变原数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 改变原数组----------------")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-splice-任意位置添加删除（返回删除的元素-空数组）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-splice-任意位置添加删除（返回删除的元素-空数组）","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.splice 🔹 任意位置添加删除（返回删除的元素/空数组）")]),t._v(" "),s("p",[t._v("通过删除或替换现有元素或者原地添加新的元素来修改数组,并以数组形式返回被修改的内容。此方法会改变原数组。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：指定修改的开始位置（从0计数）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：整数，表示要移除的数组元素的个数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数3：要添加进数组的元素,从start 位置开始。如果不指定，则 splice() 将只删除数组元素。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。")]),t._v("\narray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("splice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" deleteCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("start参数：如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从-1计数，这意味着-n是倒数第n个元素并且等价于array.length-n）；如果负数的绝对值大于数组的长度，则表示开始位置为第0位。")]),t._v(" "),s("p",[t._v("deleteCount参数：如果 deleteCount 大于 start 之后的元素的总数，则从 start 后面的元素都将被删除（含第 start 位）。如果 deleteCount 被省略了，或者它的值大于等于array.length - start(也就是说，如果它大于或者等于start之后的所有元素的数量)，那么start之后数组的所有元素都会被删除。如果 deleteCount 是 0 或者负数，则不移除元素。这种情况下，至少应添加一个新元素。")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-unshift-头部-添加（返回length）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-unshift-头部-添加（返回length）","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.unshift 🔹 头部-添加（返回length）")]),t._v(" "),s("p",[t._v("将一个或多个元素添加到数组的开头，并返回该数组的新长度(该方法修改原有数组)。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：要添加到数组开头的元素或多个元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：当一个对象调用该方法时，返回其 length 属性值。")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unshift")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" elementN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("strong",[t._v("注意")]),t._v("：如果传入多个参数，它们会被以块的形式插入到对象的开始位置，它们的顺序和被作为参数传入时的顺序一致。 于是，传入多个参数调用一次 unshift ，和传入一个参数调用多次 unshift (例如，循环调用)，它们将得到不同的结果。")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-shift-头部-删除（返回删的元素值）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-shift-头部-删除（返回删的元素值）","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.shift 🔹  头部-删除（返回删的元素值）")]),t._v(" "),s("p",[t._v("从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//无参数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：从数组中删除的元素; 如果数组为空则返回undefined 。")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shift")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("shift 方法移除索引为 0 的元素(即第一个元素)，并返回被移除的元素，其他元素的索引值随之减 1。如果 length 属性的值为 0 (长度为 0)，则返回 undefined。")]),t._v(" "),s("p",[t._v("shift 方法并不局限于数组：这个方法能够通过 call 或 apply 方法作用于类似数组的对象上。但是对于没有 length 属性（从0开始的一系列连续的数字属性的最后一个）的对象，调用该方法可能没有任何意义。")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-push-尾部-添加（返回length）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-push-尾部-添加（返回length）","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.push 🔹 尾部-添加（返回length）")]),t._v(" "),s("p",[t._v("将一个或多个元素"),s("strong",[t._v("添加")]),t._v("到数组的"),s("strong",[t._v("末尾")]),t._v("，并返回该数组的新长度")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：被添加到数组末尾的元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：当调用该方法时，新的 length 属性值将被返回")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" elementN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("push 方法具有通用性。该方法和 call() 或 apply() 一起使用时，可应用在类似数组的对象上。push 方法根据 length 属性来决定从哪里开始插入给定的值。如果 length 不能被转成一个数值，则插入的元素索引为 0，包括 length 不存在时。当 length 不存在时，将会创建它。")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-pop-尾部-删除（返回删的元素值）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-pop-尾部-删除（返回删的元素值）","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.pop 🔹 尾部-删除（返回删的元素值）")]),t._v(" "),s("p",[t._v("从数组中"),s("strong",[t._v("删除最后一个元素")]),t._v("，并返回该元素的值。此方法更改数组的长度。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//无参数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：从数组中删除的元素(当数组为空时返回undefined)")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("pop")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("pop 方法有意具有通用性。该方法和 call() 或 apply() 一起使用时，可应用在类似数组的对象上。pop方法根据 length属性来确定最后一个元素的位置。如果不包含length属性或length属性不能被转成一个数值，会将length置为0，并返回undefined。")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-copywithin-复制替换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-copywithin-复制替换","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.copyWithin 🔹 复制替换")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：0 为基底的索引，复制序列到该位置。如果是负数，target 将从末尾开始计算。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接上！如果 target 大于等于 arr.length，将会不发生拷贝。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接上！如果 target 在 start 之后，复制的序列将被修改以符合 arr.length。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：0 为基底的索引，开始复制元素的起始位置。如果是负数，start 将从末尾开始计算。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接上！如果 start 被忽略，copyWithin 将会从0开始复制。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数3：0 为基底的索引，开始复制元素的结束位置。copyWithin 将会拷贝到该位置，但不包括 end 这个位置的元素。如果是负数， end 将从末尾开始计算。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接上！如果 end 被忽略，copyWithin 方法将会一直复制至数组结尾（默认为 arr.length）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：改变后的数组。")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyWithin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"array-prototype-fill-填充"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-fill-填充","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.fill 🔹 填充")]),t._v(" "),s("p",[t._v("用一个固定值"),s("strong",[t._v("填充")]),t._v("一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：用来填充数组元素的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：起始索引，默认值为0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数3：终止索引，默认值为 this.length")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：修改后的数组")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fill")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("如果 start 是个负数, 则开始索引会被自动计算成为 length+start, 其中 length 是 this 对象的 length 属性值。如果 end 是个负数, 则结束索引会被自动计算成为 length+end。")]),t._v(" "),s("p",[t._v("fill 方法故意被设计成通用方法, 该方法不要求 this 是数组对象。")]),t._v(" "),s("p",[t._v("fill 方法是个可变方法, 它会改变调用它的 this 对象本身, 然后返回它, 而并不是返回一个副本。")]),t._v(" "),s("p",[t._v("当一个对象被传递给 fill方法的时候, 填充数组的是这个对象的引用。")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-reverse-颠倒"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-reverse-颠倒","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.reverse 🔹 颠倒")]),t._v(" "),s("p",[t._v("将数组中元素的位置颠倒，并返回该数组。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。该方法会改变原数组。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//无参数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：颠倒后的数组")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reverse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"提取子元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提取子元素","aria-hidden":"true"}},[t._v("#")]),t._v(" 提取子元素")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-slice"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-slice","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.slice 💗")]),t._v(" "),s("p",[t._v("返回一个新的数组对象，这一对象是一个由 begin 和 end 决定的原数组的浅拷贝（包括 begin，不包括end）。原始数组不会被改变。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：提取起始处的索引（从 0 开始），从该索引开始提取原数组元素。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：提取终止处的索引（从 0 开始），在该索引处结束提取原数组元素。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：一个含有被提取元素的新数组。")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("begin"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("begin参数：如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取，slice(-2) 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。如果省略 begin，则 slice 从索引 0 开始。如果 begin 大于原数组的长度，则会返回空数组。")]),t._v(" "),s("p",[t._v("end参数：如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取。 slice(-2,-1) 表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。如果 end 被省略，则 slice 会一直提取到原数组末尾。如果 end 大于数组的长度，slice 也会一直提取到原数组末尾。")]),t._v(" "),s("p",[t._v("slice 会提取原数组中索引从 begin 到 end 的所有元素（包含 begin，但不包含 end）。")]),t._v(" "),s("p",[t._v("slice 不会修改原数组，只会返回一个浅复制了原数组中的元素的一个新数组。原数组的元素会按照下述规则拷贝：")]),t._v(" "),s("ul",[s("li",[t._v("如果该元素是个对象引用 （不是实际的对象），slice 会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生改变。")]),t._v(" "),s("li",[t._v("对于字符串、数字及布尔值来说（不是 String、Number 或者 Boolean 对象），slice 会拷贝这些值到新的数组里。在别的数组里修改这些字符串或数字或是布尔值，将不会影响另一个数组。")])]),t._v(" "),s("p",[t._v("如果向两个数组任一中添加了新元素，则另一个不会受到影响。")]),t._v(" "),s("h2",{attrs:{id:"数组-转-字符串（返回字符串）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组-转-字符串（返回字符串）","aria-hidden":"true"}},[t._v("#")]),t._v(" 数组 转 字符串（返回字符串）")]),t._v(" "),s("h3",{attrs:{id:"array-prototype-tolocalestring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-tolocalestring","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.toLocaleString")]),t._v(" "),s("p",[t._v('返回一个字符串表示数组中的元素。数组中的元素将使用各自的 toLocaleString 方法转成字符串，这些字符串将使用一个特定语言环境的字符串（例如一个逗号 ","）隔开。')]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：带有BCP 47语言标记的字符串或字符串数组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：一个可配置属性的对象，对于数字 Number.prototype.toLocaleString()，对于日期Date.prototype.toLocaleString().")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：表示数组元素的字符串")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLocaleString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("locales"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("options"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"array-prototype-tostring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#array-prototype-tostring","aria-hidden":"true"}},[t._v("#")]),t._v(" Array.prototype.toString")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//无参数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：一个表示指定的数组及其元素的字符串")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Array对象覆盖了Object的 toString 方法。对于数组对象，toString 方法连接数组并返回一个字符串，其中包含用逗号分隔的每个数组元素。")]),t._v(" "),s("p",[t._v("当一个数组被作为文本值或者进行字符串连接操作时，将会自动调用其 toString 方法。")])])}],!1,null,null,null);a.default=r.exports}}]);