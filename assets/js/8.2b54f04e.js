(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{61:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"object重点api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object重点api","aria-hidden":"true"}},[t._v("#")]),t._v(" Object重点API")]),t._v(" "),s("h2",{attrs:{id:"object-prototype"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.prototype")]),t._v(" "),s("p",[t._v("表示 Object 的原型对象。只读、不可枚举、不可配置。")]),t._v(" "),s("p",[t._v("几乎所有的 JavaScript 对象都是 Object 的实例；一个典型的对象继承了Object.prototype的属性（包括方法），尽管这些属性可能被遮蔽（亦称为覆盖）。但是有时候可能"),s("strong",[t._v("故意创建不具有典型原型链继承的对象")]),t._v("，比如通过"),s("strong",[t._v("Object.create(null)"),s("strong",[t._v("创建的对象，或者通过")]),t._v("Object.setPrototypeOf方法改变原型链")]),t._v("。")]),t._v(" "),s("p",[t._v("改变Object原型，会通过原型链改变"),s("strong",[t._v("所有")]),t._v("对象；除非在原型链中进一步覆盖受这些变化影响的属性和方法。这提供了一个非常强大的、但有潜在危险的机制来覆盖或扩展对象行为。")]),t._v(" "),s("h2",{attrs:{id:"object-prototype-constructor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-constructor","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.prototype.constructor")]),t._v(" "),s("p",[t._v("返回创建实例对象的 Object 构造函数的引用。"),s("strong",[t._v("注意")]),t._v('：此属性的值是对函数本身的引用，而不是一个包含函数名称的字符串。对原始类型来说，如1，true和"test"，该值只可读。')]),t._v(" "),s("p",[t._v("所有对象都会从它的原型上继承一个 constructor 属性。")]),t._v(" "),s("h2",{attrs:{id:"object原型方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object原型方法","aria-hidden":"true"}},[t._v("#")]),t._v(" Object原型方法")]),t._v(" "),s("h3",{attrs:{id:"object-prototype-hasownproperty（判断自有属性是否包含指定属性）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-hasownproperty（判断自有属性是否包含指定属性）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.prototype.hasOwnProperty（判断自有属性是否包含指定属性）")]),t._v(" "),s("p",[t._v("会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：要检测的属性的 String 字符串形式表示的名称，或者 Symbol")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：用来判断某个对象是否含有指定的属性的布尔值 Boolean")]),t._v("\nobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("所有继承了 Object 的对象都会继承到 hasOwnProperty 方法。这个方法可以用来检测一个对象是否含有特定的自身属性；和 in 运算符不同，该方法会"),s("strong",[t._v("忽略掉那些从原型链上继承到的属性")]),t._v("。")]),t._v(" "),s("p",[t._v("即使属性的值是 null 或 undefined，只要属性存在，hasOwnProperty 依旧会返回 true。")]),t._v(" "),s("p",[t._v("示例：")]),t._v(" "),s("ul",[s("li",[t._v("判断属性是否存在")]),t._v(" "),s("li",[t._v("区别自身属性与继承属性")]),t._v(" "),s("li",[t._v("遍历一个对象的所有自身属性")])]),t._v(" "),s("h3",{attrs:{id:"object-prototype-isprototypeof（判断对象是否在另一对象的原型链上）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-isprototypeof（判断对象是否在另一对象的原型链上）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.prototype.isPrototypeOf（判断对象是否在另一对象的原型链上）")]),t._v(" "),s("p",[t._v("用于测试一个对象是否存在于另一个对象的原型链上。")]),t._v(" "),s("p",[t._v('注意：isPrototypeOf() 与 instanceof 运算符不同。在表达式 "object instanceof AFunction"中，object 的原型链是针对 AFunction.prototype 进行检查的，而不是针对 AFunction 本身。')]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：在该对象的原型链上搜寻")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：Boolean，表示调用对象是否在另一个对象的原型链上")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果 prototypeObj 为 undefined 或 null，会抛出 TypeError")]),t._v("\nprototypeObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isPrototypeOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"object-prototype-propertyisenumerable（判断单个属性是否可枚举）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-propertyisenumerable（判断单个属性是否可枚举）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.prototype.propertyIsEnumerable（判断单个属性是否可枚举）")]),t._v(" "),s("p",[t._v("返回一个布尔值，表示指定的属性是否可枚举")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：需要测试的属性名")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：用来表示指定的属性名是否可枚举的布尔值")]),t._v("\nobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("propertyIsEnumerable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("此方法可以确定对象中指定的属性是否可以被 for...in 循环枚举，但是通过原型链继承的属性除外。如果对象没有指定的属性，则此方法返回 false。")]),t._v(" "),s("h3",{attrs:{id:"object-prototype-tolocalestring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-tolocalestring","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.prototype.toLocaleString")]),t._v(" "),s("p",[t._v("返回一个该对象的字符串表示。此方法被用于派生对象为了特定语言环境的目的（locale-specific purposes）而重载使用。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：表示对象的字符串")]),t._v("\nobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLocaleString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"object-prototype-tostring"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-tostring","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.prototype.toString")]),t._v(" "),s("p",[t._v("返回一个表示该对象的字符串")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：一个表示该对象的字符串")]),t._v("\nobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v('如果此方法在自定义对象中未被覆盖，toString() 返回 "[object type]"，其中 type 是对象的类型。')]),t._v(" "),s("p",[t._v("示例：")]),t._v(" "),s("ul",[s("li",[t._v("检查对象类型：Object.prototype.toString.call(obj)")])]),t._v(" "),s("h3",{attrs:{id:"object-prototype-valueof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-valueof","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.prototype.valueOf")]),t._v(" "),s("p",[t._v("返回指定对象的原始值")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：该对象的原始值")]),t._v("\nobj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"object对象方法——常用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object对象方法——常用","aria-hidden":"true"}},[t._v("#")]),t._v(" Object对象方法——常用")]),t._v(" "),s("h3",{attrs:{id:"object-create（创建）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-create（创建）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.create（创建）")]),t._v(" "),s("p",[t._v("创建一个新对象，使用现有的对象来提供新创建的对象的__proto__。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：新创建对象的原型对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：要添加到新创建对象的不可枚举（默认）属性（即其自身定义的属性，而不是其原型链上的枚举属性）对象的属性描述符以及相应的属性名称。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接上！这些属性对应Object.defineProperties()的第二个参数。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接上！如果propertiesObject参数是 null 或非原始包装对象，则抛出一个 TypeError 异常。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：一个新对象，带着指定的原型对象和属性")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proto"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" propertiesObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("strong",[t._v("应用")]),t._v("：用 Object.create实现类式继承")]),t._v(" "),s("h3",{attrs:{id:"object-assign（浅拷贝）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-assign（浅拷贝）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.assign（浅拷贝）")]),t._v(" "),s("p",[t._v("用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：目标对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：源对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：目标对象")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("assign")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("sources"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("如果目标对象中的属性具有"),s("strong",[t._v("相同的键")]),t._v("，则属性将被源对象中的属性"),s("strong",[t._v("覆盖")]),t._v("。后面的源对象的属性将类似地覆盖前面的源对象的属性。")]),t._v(" "),s("p",[t._v("Object.assign 方法"),s("strong",[t._v("只会拷贝源对象自身的并且可枚举的属性")]),t._v("到目标对象。该方法使用源对象的[[Get]]和目标对象的[[Set]]，所以它会调用相关 getter 和 setter。因此，它分配属性，而不仅仅是复制或定义新的属性。如果合并源包含getter，这可能使其不适合将新属性合并到原型中。为了将属性定义（包括其可枚举性）复制到原型，应使用Object.getOwnPropertyDescriptor()和Object.defineProperty() 。")]),t._v(" "),s("p",[t._v("String类型和 Symbol 类型的属性都会被拷贝。")]),t._v(" "),s("p",[t._v("在出现错误的情况下，例如，如果属性不可写，会引发TypeError，如果在引发错误之前添加了任何属性，则可以更改target对象。")]),t._v(" "),s("p",[t._v("注意，Object.assign 不会在那些source对象值为 null 或 undefined 的时候抛出错误。")]),t._v(" "),s("p",[s("strong",[t._v("实例和注意事项：")])]),t._v(" "),s("ul",[s("li",[t._v("复制对象")]),t._v(" "),s("li",[t._v("合并对象")]),t._v(" "),s("li",[t._v("浅拷贝：Object.assign()拷贝的是属性值。假如源对象的属性值是一个对象的引用，那么它也只指向那个引用。")]),t._v(" "),s("li",[t._v("拷贝 symbol 类型的属性")]),t._v(" "),s("li",[t._v("继承属性和不可枚举属性是不能拷贝的")]),t._v(" "),s("li",[t._v("原始类型会被包装，null 和 undefined 会被忽略。注意，只有字符串的包装对象才可能有自身可枚举属性。")]),t._v(" "),s("li",[t._v("异常会打断后续拷贝任务")])]),t._v(" "),s("h3",{attrs:{id:"object-is（判断两个值是否是相同值）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-is（判断两个值是否是相同值）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.is（判断两个值是否是相同值）")]),t._v(" "),s("p",[t._v("判断两个值是否是相同的值")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：第一个需要比较的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：第二个需要比较的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：表示两个参数是否相同的布尔值")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Object.is() 判断两个值是否相同。如果下列任何一项成立，则两个值相同：")]),t._v(" "),s("ul",[s("li",[t._v("两个值都是 undefined")]),t._v(" "),s("li",[t._v("两个值都是 null")]),t._v(" "),s("li",[t._v("两个值都是 true 或者都是 false")]),t._v(" "),s("li",[t._v("两个值是由相同个数的字符按照相同的顺序组成的字符串")]),t._v(" "),s("li",[t._v("两个值指向同一个对象")]),t._v(" "),s("li",[t._v("两个值都是数字并且\n"),s("ul",[s("li",[t._v("都是正零 +0")]),t._v(" "),s("li",[t._v("都是负零 -0")]),t._v(" "),s("li",[t._v("都是 NaN")]),t._v(" "),s("li",[t._v("都是除零和 NaN 外的其它同一个数字")])])])]),t._v(" "),s("p",[t._v('这种相等性判断逻辑和传统的 == 运算不同，== 运算符会对它两边的操作数做隐式类型转换（如果它们类型不同），然后才进行相等性比较，（所以才会有类似 "" == false 等于 true 的现象），但 Object.is 不会做这种类型转换。')]),t._v(" "),s("p",[t._v("这与 === 运算符的判定方式也不一样。=== 运算符（和== 运算符）将数字值 -0 和 +0 视为相等，并认为 Number.NaN 不等于 NaN。")]),t._v(" "),s("h2",{attrs:{id:"属性描述符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#属性描述符","aria-hidden":"true"}},[t._v("#")]),t._v(" 属性描述符")]),t._v(" "),s("p",[t._v("两种主要形式："),s("strong",[t._v("数据描述符")]),t._v("和"),s("strong",[t._v("存取描述符")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("数据描述符")]),t._v("是一个具有值的属性，该值可能是可写的，也可能不是可写的。"),s("strong",[t._v("存取描述符")]),t._v("是由getter-setter函数对描述的属性。描述符必须是这两种形式之一；不能同时是两者。")]),t._v(" "),s("p",[t._v("数据描述符和存取描述符均具有以下可选键值(默认值是在使用Object.defineProperty()定义属性的情况下)：")]),t._v(" "),s("h3",{attrs:{id:"configurable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#configurable","aria-hidden":"true"}},[t._v("#")]),t._v(" configurable")]),t._v(" "),s("p",[t._v("当且仅当该属性的 configurable 为 true 时，该属性描述符才能够被改变，同时该属性也能从对应的对象上被删除。"),s("strong",[t._v("默认为 false")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"enumerable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#enumerable","aria-hidden":"true"}},[t._v("#")]),t._v(" enumerable")]),t._v(" "),s("p",[t._v("当且仅当该属性的enumerable为true时，该属性才能够出现在对象的枚举属性中。"),s("strong",[t._v("默认为 false")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"数据描述符同时具有以下可选键值："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据描述符同时具有以下可选键值：","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据描述符同时具有以下可选键值：")]),t._v(" "),s("h3",{attrs:{id:"value"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#value","aria-hidden":"true"}},[t._v("#")]),t._v(" value")]),t._v(" "),s("p",[t._v("该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。"),s("strong",[t._v("默认为 undefined")]),t._v("。")]),t._v(" "),s("h3",{attrs:{id:"writable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#writable","aria-hidden":"true"}},[t._v("#")]),t._v(" writable")]),t._v(" "),s("p",[t._v("当且仅当该属性的writable为true时，value才能被赋值运算符改变。"),s("strong",[t._v("默认为 false")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"存取描述符同时具有以下可选键值："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存取描述符同时具有以下可选键值：","aria-hidden":"true"}},[t._v("#")]),t._v(" 存取描述符同时具有以下可选键值：")]),t._v(" "),s("h3",{attrs:{id:"get"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get","aria-hidden":"true"}},[t._v("#")]),t._v(" get")]),t._v(" "),s("p",[t._v("一个给属性提供 getter 的方法，如果没有 getter 则为 undefined。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入this对象（由于继承关系，这里的this并不一定是定义该属性的对象）。")]),t._v(" "),s("p",[t._v("默认为 undefined。")]),t._v(" "),s("h3",{attrs:{id:"set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set","aria-hidden":"true"}},[t._v("#")]),t._v(" set")]),t._v(" "),s("p",[t._v("一个给属性提供 setter 的方法，如果没有 setter 则为 undefined。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。")]),t._v(" "),s("p",[t._v("默认为 undefined。")]),t._v(" "),s("p",[s("strong",[t._v("如果一个描述符不具有value,writable,get 和 set 任意一个关键字，那么它将被认为是一个数据描述符。如果一个描述符同时有(value或writable)和(get或set)关键字，将会产生一个异常。")])]),t._v(" "),s("p",[s("strong",[t._v("注意")]),t._v("：这些选项不一定是自身属性，如果是继承来的也要考虑。为了确认保留这些默认值，你可能要在这之前冻结 Object.prototype，明确指定所有的选项，或者通过 Object.create(null)将__proto__属性指向null。")]),t._v(" "),s("h2",{attrs:{id:"object对象方法——原型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object对象方法——原型","aria-hidden":"true"}},[t._v("#")]),t._v(" Object对象方法——原型")]),t._v(" "),s("h3",{attrs:{id:"object-getprototypeof（获取对象原型）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-getprototypeof（获取对象原型）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.getPrototypeOf（获取对象原型）")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：返回其原型的对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：指定对象的原型（内部[[Prototype]]属性的值）；若没有继承属性，返回null")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" reg "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/a/")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),s("p",[t._v("在 ES5 中，如果参数不是一个对象类型，将抛出一个TypeError异常。在 ES2015 中，参数会被强制转换为一个 Object。")]),t._v(" "),s("h3",{attrs:{id:"object-setprototypeof（设置对象原型）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-setprototypeof（设置对象原型）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.setPrototypeOf（设置对象原型）")]),t._v(" "),s("p",[t._v("设置一个指定的对象的原型 ( 即内部[[Prototype]]属性）到另一个对象或  null。")]),t._v(" "),s("p",[t._v("如果你关心性能，你应该"),s("strong",[t._v("避免设置一个对象的 [[Prototype]]")]),t._v("。相反，你**应该使用 Object.create()**来创建带有你想要的[[Prototype]]的新对象。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：要设置其原型的对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：该对象的新原型(一个对象 或 null)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：指定对象的原型（内部[[Prototype]]属性的值）；若没有继承属性，返回null")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setPrototypeOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("如果对象的[[Prototype]]被修改成不可扩展(通过 Object.isExtensible()查看)，就会抛出 TypeError异常。如果prototype参数不是一个对象或者null(例如，数字，字符串，boolean，或者 undefined)，则什么都不做。否则，该方法将obj的[[Prototype]]修改为新的值。")]),t._v(" "),s("h2",{attrs:{id:"object对象方法——属性-属性描述符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object对象方法——属性-属性描述符","aria-hidden":"true"}},[t._v("#")]),t._v(" Object对象方法——属性/属性描述符")]),t._v(" "),s("h3",{attrs:{id:"object-defineproperty（定义对象单个属性，参数2为属性名，参数3为属性描述符对象）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-defineproperty（定义对象单个属性，参数2为属性名，参数3为属性描述符对象）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.defineProperty（定义对象单个属性，参数2为属性名，参数3为属性描述符对象）")]),t._v(" "),s("p",[t._v("直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。")]),t._v(" "),s("p",[t._v("在ES6中，由于 Symbol类型的特殊性，用Symbol类型的值来做对象的key与常规的定义或修改不同，而Object.defineProperty 是定义key为Symbol的属性的方法之一。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：要在其上定义属性的对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：要定义或修改的属性的名称")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数3：将被定义或修改的属性描述符")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：被传递给函数的对象")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" descriptor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("strong",[t._v("与通过赋值操作添加的普通属性的区别：")])]),t._v(" "),s("ul",[s("li",[t._v("普通属性是可枚举的（即for...in 或 Object.keys 方法），可改变，可删除")]),t._v(" "),s("li",[t._v("Object.defineProperty方法允许修改默认的额外选项（或配置）。默认情况下，使用 Object.defineProperty() 添加的属性值是不可修改的。")])]),t._v(" "),s("h4",{attrs:{id:"创建属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建属性","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建属性")]),t._v(" "),s("p",[t._v("如果对象中不存在指定的属性，Object.defineProperty()就创建这个属性。当描述符中省略某些字段时，这些字段将使用它们的默认值。拥有布尔值的字段的默认值都是false。value，get和set字段的默认值为undefined。一个没有get/set/value/writable定义的属性被称为“通用的”，并被“键入”为一个数据描述符。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在对象中添加一个属性与数据描述符的示例")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  value "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("37")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  writable "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  enumerable "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  configurable "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在对象中添加一个属性与存取描述符的示例")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("get")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" bValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("set")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("newValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    bValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  enumerable "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  configurable "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h4",{attrs:{id:"修改属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改属性","aria-hidden":"true"}},[t._v("#")]),t._v(" 修改属性")]),t._v(" "),s("p",[t._v("如果属性已经存在，Object.defineProperty()将尝试根据描述符中的值以及对象当前的配置来修改这个属性。如果旧描述符将其configurable 属性设置为false，则该属性被认为是“不可配置的”，并且没有属性可以被改变（除了单向改变 writable 为 false）。当属性不可配置时，不能在数据和访问器属性类型之间切换。")]),t._v(" "),s("p",[t._v("当试图改变不可配置属性（除了value和writable 属性之外）的值时会抛出TypeError，除非当前值和新值相同。")]),t._v(" "),s("ul",[s("li",[t._v("当writable属性设置为false时，该属性被称为“不可写”。它不能被重新分配。")]),t._v(" "),s("li",[t._v("enumerable定义了对象的属性是否可以在 for...in 循环和 Object.keys() 中被枚举。")]),t._v(" "),s("li",[t._v("configurable特性表示对象的属性是否可以被删除，以及除value和writable特性外的其他特性是否可以被修改。")])]),t._v(" "),s("h3",{attrs:{id:"object-defineproperties（批量定义对象属性，参数2为多个属性操作符对象）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-defineproperties（批量定义对象属性，参数2为多个属性操作符对象）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.defineProperties（批量定义对象属性，参数2为多个属性操作符对象）")]),t._v(" "),s("p",[t._v("直接在一个对象上定义新的属性或修改现有属性，并返回该对象。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：在其上定义或修改属性的对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：要定义其可枚举属性或修改的属性描述符的对象。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：传递给函数的对象")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperties")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" props"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperties")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'property1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    writable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Object.defineProperties本质上定义了obj 对象上props的可枚举属性相对应的所有属性。")]),t._v(" "),s("h3",{attrs:{id:"object-getownpropertydescriptor（获取单个自有属性的属性描述符，参数2为属性名）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertydescriptor（获取单个自有属性的属性描述符，参数2为属性名）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.getOwnPropertyDescriptor（获取单个自有属性的属性描述符，参数2为属性名）")]),t._v(" "),s("p",[s("strong",[t._v("自有属性")]),t._v("指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：需要查找的目标对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数2：目标对象内属性名称")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：返回指定对象上一个自有属性对应的属性描述符。否则返回 undefined。")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" bar"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bar"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// d {")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   configurable: true,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   enumerable: true,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   value: 42,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   writable: true")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n")])])]),s("p",[s("strong",[t._v("注意")]),t._v("：在 ES5 中，如果该方法的第一个参数不是对象（而是原始类型），那么就会产生出现 TypeError。而在 ES2015，第一个的参数不是对象的话就会被强制转换为对象。")]),t._v(" "),s("h3",{attrs:{id:"object-getownpropertydescriptors（获取所有自有属性描述符）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertydescriptors（获取所有自有属性描述符）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.getOwnPropertyDescriptors（获取所有自有属性描述符）")]),t._v(" "),s("p",[t._v("用来获取一个对象的所有自身属性的描述符。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数：任意对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：所指定对象的所有自身属性的描述符，如果没有任何自身属性，则返回空对象")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("示例：")]),t._v(" "),s("ul",[s("li",[t._v("浅拷贝一个对象")])]),t._v(" "),s("p",[t._v("Object.assign() 方法只能拷贝源对象的可枚举的自身属性，同时拷贝时无法拷贝属性的特性们，而且访问器属性会被转换成数据属性，也无法拷贝源对象的原型。")]),t._v(" "),s("p",[t._v("Object.getOwnPropertyDescriptors方法配合 Object.create() 方法可以实现上面说的这些。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n  Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("创建子类")])]),t._v(" "),s("h3",{attrs:{id:"object-getownpropertynames（获取自有属性名数组）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-getownpropertynames（获取自有属性名数组）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.getOwnPropertyNames（获取自有属性名数组）")]),t._v(" "),s("p",[t._v("返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：一个对象，其自身的可枚举和不可枚举属性的名称被返回。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：在给定对象上找到的自身属性对应的字符串数组")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOwnPropertyNames")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("在 ES5 中，如果参数不是一个原始对象类型，将抛出一个 TypeError  异常。在 ES2015 中，非对象参数被强制转换为对象 。")]),t._v(" "),s("h2",{attrs:{id:"对象密封-冻结-不可扩展"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象密封-冻结-不可扩展","aria-hidden":"true"}},[t._v("#")]),t._v(" 对象密封/冻结/不可扩展")]),t._v(" "),s("h4",{attrs:{id:"object-seal、object-freeze、object-preventextensions区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-seal、object-freeze、object-preventextensions区别","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.seal、Object.freeze、Object.preventExtensions区别")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}},[t._v("方法")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("禁止增加属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("禁止删除属性")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("禁止修改属性")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("Object.seal")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("是")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("是")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("否")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("Object.freeze")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("是")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("是")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("是")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[t._v("Object.preventExtensions")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("是")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("否")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("否")])])])]),t._v(" "),s("h3",{attrs:{id:"object-seal（密封）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-seal（密封）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.seal（密封）")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：将要被密封的对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：封闭一个对象，阻止添加新属性并将所有现有属性标记为不可配置。当前属性的值只要可写就可以改变。返回被密封对象的引用。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接上！不可配置即不可删除，且数据属性不能被重新定义成访问器属性，反之亦然。但属性的值仍然可以修改")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("seal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("不会影响从原型链上继承的属性。但 "),s("strong",[t._v("proto")]),t._v(" (  ) 属性的值也会不能修改。")]),t._v(" "),s("h3",{attrs:{id:"object-freeze（冻结）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-freeze（冻结）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.freeze（冻结）")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：要被冻结的对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：一个被冻结的对象再也不能被修改；")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接上！冻结了一个对象则不能向这个对象添加新的属性，不能删除已有属性，不能修改该对象已有属性的可枚举性、可配置性、可写性，以及不能修改已有属性的值。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//接上！此外，冻结一个对象后该对象的原型也不能被修改。freeze() 返回和传入的参数相同的对象。")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("freeze")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"object-preventextensions（不可扩展）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-preventextensions（不可扩展）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.preventExtensions（不可扩展）")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：将要变得不可扩展的对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：已经不可扩展的对象。也就是永远不能再添加新的属性。")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("preventExtensions")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("strong",[t._v("注意")]),t._v("：一般来说，不可扩展对象的属性可能仍然可被删除。")]),t._v(" "),s("p",[t._v("Object.preventExtensions()仅阻止添加自身的属性。但属性仍然可以添加到对象原型。")]),t._v(" "),s("h3",{attrs:{id:"object-issealed（判断是否密封）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-issealed（判断是否密封）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.isSealed（判断是否密封）")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：被检查的对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：给定对象是否被密封的一个Boolean")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSealed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"object-isfrozen（判断是否冻结）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-isfrozen（判断是否冻结）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.isFrozen（判断是否冻结）")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：被检测的对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：给定对象是否被冻结的Boolean")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isFrozen")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"object-isextensible（判断是否不可扩展）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-isextensible（判断是否不可扩展）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.isExtensible（判断是否不可扩展）")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：需要检测的对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：给定对象是否可扩展的一个Boolean")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isExtensible")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Object.preventExtensions，Object.seal 或 Object.freeze 方法都可以标记一个对象为不可扩展。")]),t._v(" "),s("h2",{attrs:{id:"获取对象键-值组成的数组（参数是对象）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#获取对象键-值组成的数组（参数是对象）","aria-hidden":"true"}},[t._v("#")]),t._v(" 获取对象键/值组成的数组（参数是对象）")]),t._v(" "),s("h3",{attrs:{id:"object-keys"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-keys","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.keys")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：要返回其枚举自身属性的对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 for...in 循环遍历该对象时返回的顺序一致")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("keys")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("strong",[t._v("注意")]),t._v("：在ES5里，如果此方法的参数不是对象（而是一个原始值），那么它会抛出 TypeError。在ES2015中，非对象的参数将被强制转换为一个对象。")]),t._v(" "),s("h3",{attrs:{id:"object-values"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-values","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.values")]),t._v(" "),s("p",[t._v("返回一个给定对象自身的所有可枚举属性值的数组，值的顺序与使用for...in循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：被返回可枚举属性值的对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：一个包含对象自身的所有可枚举属性值的数组")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("values")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"object-entries"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-entries","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.entries")]),t._v(" "),s("p",[t._v("返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 for...in 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环还会枚举原型链中的属性）。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：可以返回其可枚举属性的键值对的对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：给定对象自身可枚举属性的键值对数组")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("entries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("实例：new Map() 构造函数接受一个可迭代的entries。借助Object.entries方法你可以很容易的将Object转换为Map。")]),t._v(" "),s("h3",{attrs:{id:"object-fromentries（entries-的反转）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#object-fromentries（entries-的反转）","aria-hidden":"true"}},[t._v("#")]),t._v(" Object.fromEntries（entries 的反转）")]),t._v(" "),s("p",[t._v("把键值对列表转换为一个对象")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//参数1：可迭代对象，类似 Array 、 Map 或者其它实现了可迭代协议的对象")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回值：一个由该迭代对象条目提供对应属性的新对象")]),t._v("\nObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fromEntries")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("Object.fromEntries() 是 Object.entries 的反转。")]),t._v(" "),s("p",[t._v("示例：")]),t._v(" "),s("ul",[s("li",[t._v("Map 转化为 Object")]),t._v(" "),s("li",[t._v("Array 转化为 Object")]),t._v(" "),s("li",[t._v("对象转换")])])])}],!1,null,null,null);a.default=n.exports}}]);